[
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "src.limpeza_vendas",
        "description": "src.limpeza_vendas",
        "peekOfCode": "df = pd.read_csv('./assets/vendas_modificado.csv')\n# 1. Ajuste de formatação e remoção de espaços extras\ndf.columns = df.columns.str.strip()  # Remove espaços dos nomes das colunas\ndf = df.applymap(lambda x: x.strip() if isinstance(x, str) else x)  # Remove espaços dos valores textuais\n# 2. Padronização de produtos\ndf['produto'] = df['produto'].str.title().str.replace(r'[^\\w\\s]', '', regex=True)\n# 3. Tratamento de dados faltantes com valores padrão\ndf.fillna({\n    'valor': 0.0,\n    'quantidade': 0,",
        "detail": "src.limpeza_vendas",
        "documentation": {}
    },
    {
        "label": "df.columns",
        "kind": 5,
        "importPath": "src.limpeza_vendas",
        "description": "src.limpeza_vendas",
        "peekOfCode": "df.columns = df.columns.str.strip()  # Remove espaços dos nomes das colunas\ndf = df.applymap(lambda x: x.strip() if isinstance(x, str) else x)  # Remove espaços dos valores textuais\n# 2. Padronização de produtos\ndf['produto'] = df['produto'].str.title().str.replace(r'[^\\w\\s]', '', regex=True)\n# 3. Tratamento de dados faltantes com valores padrão\ndf.fillna({\n    'valor': 0.0,\n    'quantidade': 0,\n    'total': 0.0,\n    'frete': 0.0,",
        "detail": "src.limpeza_vendas",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "src.limpeza_vendas",
        "description": "src.limpeza_vendas",
        "peekOfCode": "df = df.applymap(lambda x: x.strip() if isinstance(x, str) else x)  # Remove espaços dos valores textuais\n# 2. Padronização de produtos\ndf['produto'] = df['produto'].str.title().str.replace(r'[^\\w\\s]', '', regex=True)\n# 3. Tratamento de dados faltantes com valores padrão\ndf.fillna({\n    'valor': 0.0,\n    'quantidade': 0,\n    'total': 0.0,\n    'frete': 0.0,\n    'cep': '00000-000',",
        "detail": "src.limpeza_vendas",
        "documentation": {}
    },
    {
        "label": "df['produto']",
        "kind": 5,
        "importPath": "src.limpeza_vendas",
        "description": "src.limpeza_vendas",
        "peekOfCode": "df['produto'] = df['produto'].str.title().str.replace(r'[^\\w\\s]', '', regex=True)\n# 3. Tratamento de dados faltantes com valores padrão\ndf.fillna({\n    'valor': 0.0,\n    'quantidade': 0,\n    'total': 0.0,\n    'frete': 0.0,\n    'cep': '00000-000',\n}, inplace=True)\n# 4. Validação e formatação de CEPs",
        "detail": "src.limpeza_vendas",
        "documentation": {}
    },
    {
        "label": "df['cep']",
        "kind": 5,
        "importPath": "src.limpeza_vendas",
        "description": "src.limpeza_vendas",
        "peekOfCode": "df['cep'] = df['cep'].astype(str).str.replace(r'[^\\d]', '', regex=True)\ndf['cep'] = df['cep'].apply(lambda x: f\"{x[:5]}-{x[5:]}\" if len(x) == 8 else '00000-000')\n# 5. Conversão de tipos para colunas numéricas\ncolunas_numericas = ['valor', 'quantidade', 'total', 'frete']\nfor col in colunas_numericas:\n    df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0)\n# 6. Remoção de registros duplicados\ndf.drop_duplicates(inplace=True)\n# 7. Validação da coluna 'total' (com margem de erro)\ndf['total_calculado'] = df['valor'] * df['quantidade'] + df['frete']",
        "detail": "src.limpeza_vendas",
        "documentation": {}
    },
    {
        "label": "df['cep']",
        "kind": 5,
        "importPath": "src.limpeza_vendas",
        "description": "src.limpeza_vendas",
        "peekOfCode": "df['cep'] = df['cep'].apply(lambda x: f\"{x[:5]}-{x[5:]}\" if len(x) == 8 else '00000-000')\n# 5. Conversão de tipos para colunas numéricas\ncolunas_numericas = ['valor', 'quantidade', 'total', 'frete']\nfor col in colunas_numericas:\n    df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0)\n# 6. Remoção de registros duplicados\ndf.drop_duplicates(inplace=True)\n# 7. Validação da coluna 'total' (com margem de erro)\ndf['total_calculado'] = df['valor'] * df['quantidade'] + df['frete']\ndf = df[np.isclose(df['total'], df['total_calculado'], atol=0.01)]",
        "detail": "src.limpeza_vendas",
        "documentation": {}
    },
    {
        "label": "colunas_numericas",
        "kind": 5,
        "importPath": "src.limpeza_vendas",
        "description": "src.limpeza_vendas",
        "peekOfCode": "colunas_numericas = ['valor', 'quantidade', 'total', 'frete']\nfor col in colunas_numericas:\n    df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0)\n# 6. Remoção de registros duplicados\ndf.drop_duplicates(inplace=True)\n# 7. Validação da coluna 'total' (com margem de erro)\ndf['total_calculado'] = df['valor'] * df['quantidade'] + df['frete']\ndf = df[np.isclose(df['total'], df['total_calculado'], atol=0.01)]\n# 8. Salva o DataFrame limpo\ndf.to_csv('./assets/limpos/dados_megasuper_vendas_limpos.csv', index=False)",
        "detail": "src.limpeza_vendas",
        "documentation": {}
    },
    {
        "label": "df['total_calculado']",
        "kind": 5,
        "importPath": "src.limpeza_vendas",
        "description": "src.limpeza_vendas",
        "peekOfCode": "df['total_calculado'] = df['valor'] * df['quantidade'] + df['frete']\ndf = df[np.isclose(df['total'], df['total_calculado'], atol=0.01)]\n# 8. Salva o DataFrame limpo\ndf.to_csv('./assets/limpos/dados_megasuper_vendas_limpos.csv', index=False)\n# Relatório Resumido\nrelatorio = \"\"\"\nRELATÓRIO DE LIMPEZA DE DADOS\n1. Ajustes de Formatação:\n   - Espaços removidos de colunas e valores.\n   - Produtos padronizados (Title Case, sem caracteres especiais).",
        "detail": "src.limpeza_vendas",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "src.limpeza_vendas",
        "description": "src.limpeza_vendas",
        "peekOfCode": "df = df[np.isclose(df['total'], df['total_calculado'], atol=0.01)]\n# 8. Salva o DataFrame limpo\ndf.to_csv('./assets/limpos/dados_megasuper_vendas_limpos.csv', index=False)\n# Relatório Resumido\nrelatorio = \"\"\"\nRELATÓRIO DE LIMPEZA DE DADOS\n1. Ajustes de Formatação:\n   - Espaços removidos de colunas e valores.\n   - Produtos padronizados (Title Case, sem caracteres especiais).\n2. Tratamento de Dados Faltantes:",
        "detail": "src.limpeza_vendas",
        "documentation": {}
    },
    {
        "label": "relatorio",
        "kind": 5,
        "importPath": "src.limpeza_vendas",
        "description": "src.limpeza_vendas",
        "peekOfCode": "relatorio = \"\"\"\nRELATÓRIO DE LIMPEZA DE DADOS\n1. Ajustes de Formatação:\n   - Espaços removidos de colunas e valores.\n   - Produtos padronizados (Title Case, sem caracteres especiais).\n2. Tratamento de Dados Faltantes:\n   - Preenchimento com valores padrão (ex.: CEP '00000-000', valor 0).\n3. Validações:\n   - CEPs formatados corretamente (XXXXX-XXX).\n   - Colunas numéricas convertidas com segurança.",
        "detail": "src.limpeza_vendas",
        "documentation": {}
    }
]